{"version":3,"sources":["Components/Header/Header.js","Components/NewNote/NewNote.js","Components/Task/Task.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","NewNote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todo","showModal","handleOpenModal","bind","assertThisInitialized","handleCloseModal","handleSaveNote","setState","e","preventDefault","task","target","note","value","onAddTodo","onClick","lib_default","id","isOpen","contentLabel","onRequestClose","ariaHideApp","onSubmit","htmlFor","name","type","Task","getTaskHtml","arr","length","map","i","key","onDelete","index","window","confirm","html","onShow","App","todos","addTodo","removeTask","filter","elem","concat","toConsumableArray","Components_Header_Header","Components_NewNote_NewNote","Components_Task_Task","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68f81c99.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <nav>\n                <ul className=\"nav justify-content-center\">\n                    <li className=\"nav-item\">\n                        <label className=\"title\"><i className=\"fa fa-sticky-note\"/> Tasks</label>\n                    </li>\n                </ul>\n            </nav>\n        );\n    };\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport ReactModal from 'react-modal';\nimport './NewNote.css';\n\n\nclass NewNote extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todo: '',\n            showModal: false\n        };\n\n        this.handleOpenModal = this.handleOpenModal.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleSaveNote = this.handleSaveNote.bind(this);\n    }\n\n    handleOpenModal() {\n        this.setState({showModal: true});\n    }\n\n    handleCloseModal() {\n        this.setState({showModal: false});\n    }\n\n    async handleSaveNote(e) {\n        e.preventDefault();\n        let task = e.target.note.value;\n        await this.setState({todo: task});\n        this.props.onAddTodo(this.state.todo);\n        this.handleCloseModal();\n    }\n\n    render() {\n        return (\n            <div>\n                <button className='btn btn-lg btn-danger btn-circle' onClick={this.handleOpenModal}><i\n                    className='fa fa-2x fa-plus'/></button>\n                <ReactModal\n                    id='#modal'\n                    isOpen={this.state.showModal}\n                    contentLabel=\"onRequestClose Example\"\n                    onRequestClose={this.handleCloseModal}\n                    ariaHideApp={false}\n                >\n                    <div className=\"container\">\n                        <form onSubmit={this.handleSaveNote}>\n                            <div className=\"row\">\n                                <h2>Create new note</h2>\n                            </div>\n                            <hr/>\n                            <div className='row'>\n                                <label htmlFor=\"note\">Body</label><br/>\n                            </div>\n                            <div className=\"row\">\n                                <div className='input-group'>\n                                    <textarea className='form-control' name=\"note\" id=\"note\"/>\n                                </div>\n                            </div>\n                            <hr/>\n                            <div className=\"row\">\n                                <div className='input-group'>\n                                    <button type='submit' className='btn btn-success btn-lg'>Save</button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </ReactModal>\n            </div>\n\n        );\n    }\n}\n\nexport default NewNote;","import React, {Component} from 'react';\n\nclass Task extends Component {\n    getTaskHtml = arr => {\n        if (arr.length < 1) {\n            return (\n                <div className=\"col-md-12\">\n                    <span className=\"badge badge-pill badge-info mt-3\"><h2>No data to display</h2></span>\n                </div>\n            );\n        }\n        return arr.map((task, i) => {\n            return (\n                <div className=\"col-md-4 mt-3\" key={i}>\n                    <div className=\"card\">\n                        <div className='card-header'>\n                            Task #{i + 1}\n                        </div>\n                        <div className=\"card-body\">\n                            <span>{task}</span>\n                        </div>\n                        <div className=\"card-footer\">\n                            <button className=\"btn btn-danger btn-circle\" onClick={this.onDelete.bind(this, i)}><i\n                                className=\"fa fa-eraser\"/></button>\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n\n    };\n\n    onDelete(index) {\n        if (window.confirm(\"Are you sure?\")) {\n            this.props.onDelete(index);\n        }\n    }\n\n    render() {\n        const html = this.getTaskHtml(this.props.onShow);\n        return (\n            <div className=\"container mt-5\">\n                <div className='row'>\n                    {html}\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Task;","import React, {Component} from 'react';\nimport Header from './Components/Header/Header';\nimport NewNote from './Components/NewNote/NewNote';\nimport Task from './Components/Task/Task';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos: []\n        };\n        this.addTodo = this.addTodo.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n\n    }\n\n    async removeTask(index) {\n        await this.setState({\n            todos: this.state.todos.filter((elem, i) => {\n                return i !== index;\n            })\n        });\n    }\n\n    async addTodo(todo) {\n        await this.setState({todos: [...this.state.todos, todo]});\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Header/>\n          <NewNote onAddTodo={this.addTodo}/>\n          <Task onShow={this.state.todos} onDelete={this.removeTask}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}